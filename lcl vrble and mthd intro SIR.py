#Today we discus about Local Variable.#Sometimes to fullfill a temporary requirements of a programmer , we can declare variable .These Type of variable consider as a local variable.#Local variable will be created at the time of method execution and destroy once the method will be completed.#Local variable cannot be access from the outside the method.class Abc:    def m1(self):        a = "Local"        print("Here a is ==",a)    def m2(self):        b = 200        print("b is also local==",b)f = Abc()print(f)print("data===",f.__dict__)f.m1()f.m2()print("data===",f.__dict__)#==================================Methods==================================#Instance Method#Static Method#Class Method.#Instance Method------->>>#Here if we are using  instance variables then such type of metthod are calles instance method..Here we have to pass self variable.#SO if we are passing self in any method then it is consider as instance method.class Test:    def m1(nis):        nis.a = 12        nis.b = 78    def m2(nis):        print(nis.a)        print(nis.b)t = Test()print("data====>>",t.__dict__)t.m1()print("data====>>",t.__dict__)t.m2()#Static Method.....#A static method bound to the class and not the object of the class.#A static method cannot access or modify class state.#and these methods present it the class because for these are hold the logic which is use to manage the requirement.#In class if method is not belong to instance once then it definately a party of static once.class Test:    def  __init__(self):        self.a = 12        self.b = "new"    def my():        print("I am static method")        h = Test()  #object#h.my()  #not possible.Test.my() #class lvlclass Test1:    def  __init__(self):        self.a = 12        self.b = "new"    def my1():        print("Simple Static Method")    @staticmethod    def my2():        print("by using decorator")g = Test1()Test1.my1() #by using class nameTest1.my2() #using class nameg.my2() #using object#if we use decorator then we call static method with the help of object.#=====class Method======class Test:    @classmethod    def hello1(cls,x,y):        print("x+y===",x+y)    @classmethod    def mul(cls,a,b):                print(a+b)y = Test()# by using object5 refrence.y.hello1(12,45)y.mul("nishant "," rajput")#by using class nameTest.hello1(12,+65)Test.mul("sdff" ,"sfsf")#Example...class Exp:    a = "I am class lvl var"    def __init__(self,a,b,c): #temp   constructor        self.a = a        self.b = b  #All these are instance variable        self.c = c            def my1(self):#instance_method        print("the value of a,b,c=====",self.a,self.b,self.c)    def my2(): #local_method        print("Acesss class lvl var in static method===",Exp.a)        a = 78        b = 478 #these two are local variables.        print("a+b===",a+b)    @staticmethod    def my3(a1,b1):        print("a1+b1===",a1+b1)    @classmethod    def my4(cls,s,d):        print("s*d===>>",s*d)r   = Exp(12,45,65)r.my1()  # by using object name.#Exp.my1()  #nOt possibleExp.my2()#r.my() #not possibleExp.my3(45,87)r.my3("hello "," hy")r.my4(45,65)Exp.my4(5,6)                                        